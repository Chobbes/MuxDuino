#+TITLE: MuxDuino Notes
#+AUTHOR: Calvin Beck
#+OPTIONS: ^:{}

* Introduction
  The purpose of the MuxDuino library is to provide an easy to use API
  for turning an Arduino into a little fancy pants networking hub.

  The idea is that you can make a connection between two pins on the
  Arduino; one of these pins will serve as an input, while the other
  pin serves as an output. Each connection will also have a number
  representing the 'channel' attached to it, this can be any integer.

  Once you register all of the connections and channels with MuxDuino
  a single function call may be used to read through all of the input
  pins in order to generate the appropriate outputs for the respective
  output pins. For instance if you were to have a pipe from the input
  pin 12 to the output pin 13 each time you tell MuxDuino to do an
  update it will read the digital value from pin 12 (either HIGH or
  LOW), and then write that value to pin 13. Using this you are able
  to connect multiple components through an Arduino and easily change
  the topology of the network without having to rewire everything!

  Each output is associated with a set of channels. Only one of these
  channels may be activated at any given time. When a channel is
  activated all of the inputs on that channel are logically OR'd
  together in order to produce the output. That is to say that if any
  of the inputs on that channel are HIGH the output will receive a
  value of HIGH. The output will only receive a value of LOW when none
  of the inputs on a channel are HIGH. The channels are disjoint for
  each output. If output 1 and output 2 both have a channel 7, then
  the channel 7's may have a completely separate set of inputs.

* Interface

** Structures
   Using this API you will encounter one main structure - the
   MuxPipe. It looks something like this:

   #+BEGIN_SRC c
     typedef struct MuxPipe {
         int in_pin;
         int out_pin;
         int channel;
     } MuxPipe;
   #+END_SRC

   The MuxPipe structure just represents a connection between an input
   pin, and an output pin on a given channel. These are used to
   register connections with MuxDuino, and to remove them if
   necessary.

** Registering Pipes with MuxDuino
   In order to use MuxDuino in a project we need to tell it which
   inputs map to which outputs! In order to do this we use the
   following function:

   #+BEGIN_SRC c
     int register_pipe(MuxPipe pipe);
   #+END_SRC

   Let's say that *pipe* looks something like this:

   #+BEGIN_SRC c
     MuxPipe pipe;

     pipe.in_pin = 7;
     pipe.out_pin = 9;
     pipe.channel = 0;
   #+END_SRC

   All this function call does is tell MuxDuino that we want to send
   the value we read off of pin 7 to the output pin 9 whenever the
   channel for output pin 9 is set to 0. If there are other inputs on
   channel 0 for pin 9 input 7 will be logically OR'd with the rest of
   the inputs in channel 0 to produce the output.

   The channel for the output will be set to the channel of the first
   registered pipe with that output.

   This function will return 0 on success, and non-zero otherwise. The
   function will fail for a couple of reasons. If you try to register
   a pipe with identical input and output pins this is considered an
   error and a value of 1 will be returned. If a pipe is registered
   with an input that was previously declared as an output then 2 will
   be returned. If the pipe has an output that was previously declared
   to be an input then 3 will be returned. These are checked in this
   order - multiple problems can occur, but only the first one seen
   will be reflected in the error code.

   This function will set the pin mode for the pins as
   designated. Also note that this function may allocate some
   memory. Duplicated pipes won't change anything, though.

** Removing a Pipe
   It's possible that you may want to remove a pipe from the MuxDuino
   network in order to stop the signals from being passed through, or
   to reconfigure an input to be an output and vice versa. This is
   done via the following function:

   #+BEGIN_SRC c
     void remove_pipe(MuxPipe pipe);
   #+END_SRC

   If the pipe has previously been registered with MuxDuino it will be
   removed and the pins may be added to either an input or an output
   in a channel -- you can change the type of pin. If the pipe was
   never registered then it doesn't need to be removed, so the
   function does not change anything.

   The channel of the output will not change if all of the pipes in
   that channel are removed. It will remain the same.

** Setting Output Channels
   You may add several different channels to any given output. An
   output starts with the channel of the pipe that was first
   registered with that output, however you may want to adjust the
   channel using the following:

   #+BEGIN_SRC c
     void set_output_channel(int out_pin, int new_channel);
   #+END_SRC

   This sets the current channel for the output given by *out_pin* to
   *new_channel*. If there are no inputs on *new_channel* the channel
   will still change, and no further updates will be made to the
   output, unless an input is added to that channel later.

   If *out_pin* has not previously been registered as an output then
   this function will do nothing.

** Updating Pins
   The meat and potatoes function of MuxDuino is:

   #+BEGIN_SRC c
     void mux_update();
   #+END_SRC

   This function cycles through the inputs in the channels, reading
   each of them in, and then produces the output for each of them and
   writes the output to the output pins. This must be called each time
   the outputs are to be updated, so it's best to put this in some
   kind of loop.

   There is also another version of this function...

   #+BEGIN_SRC c
     void mux_update_serial_debug();
   #+END_SRC

   Which you may use if the serial pins (usually pin 0 and 1) on the
   Arduino are free for use, and the serial port has been set up. This
   version of update sends some debugging information over the serial
   port whenever an output is written to. These messages take the form
   of:

   #+BEGIN_EXAMPLE
     Writing HIGH from channel <channel number>: <in pin> -> <out pin>
   #+END_EXAMPLE

   Where *<in pin>* is the first input pin read in the channel to have
   a value of *HIGH* channel. And also:

   #+BEGIN_EXAMPLE
        Writing LOW from channel <channel number>: <out pin>
   #+END_EXAMPLE

* Implementation
  This section notes some of the details on how the current
  implementation of MuxDuino works. There will be some discussion
  about each of the functions and the data structures which they use.

** Data Structures
   Currently nearly everything will be a linked list for a couple of
   reasons. First of all we want to be able to add and remove
   connections arbitrarily, and this is something that linked lists
   can do. The main operation for this library is mux_update(), and
   that's what we expect to be calling the most. What mux_update() has
   to do is cycle through all of the outputs and generate the
   appropriate signal for them - this is very easy to do if all of the
   outputs are part of a linked list. Dynamic memory allocations are a
   concern on embedded platforms, but the idea is that you would set
   your network up with one big allocation at the beginning and
   usually not change it (at least not very frequently). Ultimately
   this makes it far easier to create a bunch of arbitrary
   connections, so we won't be too concerned about using dynamic
   memory.

*** Output List
    The top level data structure which MuxDuino deals with is the
    output list. This list contains nodes like the following:

    #+BEGIN_SRC c
      typedef struct MuxOutputNode {
          int out_pin;
      
          int channel_num;
          MuxChannelNode *current_channel;
      
          ChannelList channels;
      
          struct MuxOutputNode *next;
      } MuxOutputNode;
    #+END_SRC

    Where *out_pin* is the output pin, *current_channel* is a pointer
    to the currently selected channel, and *channel_num* is the
    integer number for the currently selected channel.

*** Channels
    And *MuxChannelNode* structure will look like:

    #+BEGIN_SRC c
      typedef struct MuxChannelNode {
          int channel;
          MuxInputList inputs;
      
          struct MuxChannelNode *next;
      } MuxChannelNode;
    #+END_SRC

    Where *channel* is the number for the channel, and *inputs* is a
    linked list of input pin numbers that are registered in this
    channel for this output. This forms a linked list of channels.

** Pipe Registration
   In order to register a pipe we must go through the list of outputs
   to determine if the output pin has already been used (in which case
   we do not need to create a new entry in the output list), or if the
   input has previously been used as an output. We also need to check
   if the output pin of the pipe we are adding has ever been used as
   an input in any channel across any output.

   First we find our create the MuxOutput for our output pin. Then we
   search the channel list to see if the channel already exists. If
   not, create the channel, if so search the channel and see if the
   input is already in the input list. If the input is already in the
   channel's input list do nothing, otherwise we need to add the input
   to the list.

   If this is the only pipe for this output then we need to set the
   channel for the output to the pipe's channel. If this is not the
   only pipe registered with this output, and we have the current
   channel set to this one, and the channel did not previously exist
   we need to adjust for this -- the current channel pointer may be
   NULL otherwise.

   Note that we must also set th pin modes!

** Pipe Removal
   First we scan the output list for the output of the pipe we want to
   remove. If it's not there we don't do anything, but otherwise we
   need to then check the *MuxOutput* structure for the channel - if
   it's not there we can again ignore it. Otherwise we need to check
   for the input in the channel's input list. If it's not there we
   just return...

   However, if we find the input this means that the pipe was
   previously registered and we have to remove it. This removal is
   complicated by the fact that this may be the last input in a
   channel, and that channel may be the last channel in the MuxOutput
   structure as well. We want to clean these things up, and we don't
   want any memory leaks.

   If the input is the last input in the channel then we need to free
   the channel and remove it from the channel list. If this is the
   currently selected channel then we will need to make sure we set
   the current channel pointer to NULL as well.

   If after doing this the channel list is now empty then we must free
   the entire output, and remove it from the outputs list.

** Setting Output Channels
   We start by scanning the output list for the output, if it's not
   there we give up. If the output is in the output list then we set
   *channel_num* on it to the desired channel. We then try to find the
   channel in the channels list -- if it's there we update the current
   channel pointer with it, otherwise we have it set to NULL.

** Performing an Update
   In order to perform an update we iterate over each output in the
   output list. If the output's current channel does not exist (i.e.,
   has no inputs), then we do not do anything for that
   output. Otherwise we read the inputs in the current channel, and if
   one of the inputs is HIGH then we write HIGH to the output pin -
   otherwise we write LOW.
