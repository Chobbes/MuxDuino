#+TITLE: MuxDuino Notes
#+AUTHOR: Calvin Beck
#+OPTIONS: ^:{}

* Introduction
  The purpose of the MuxDuino library is to provide an easy to use API
  for turning an Arduino into a little fancy pants networking hub.

  The idea is that you can make a connection between two pins on the
  Arduino; one of these pins will serve as an input, while the other
  pin serves as an output. Each connection will also have a number
  representing the 'channel' attached to it, this can be any integer.

  Once you register all of the connections and channels with MuxDuino
  a single function call may be used to read through all of the input
  pins in order to generate the appropriate outputs for the respective
  output pins. For instance if you were to have a pipe from the input
  pin 12 to the output pin 13 each time you tell MuxDuino to do an
  update it will read the digital value from pin 12 (either HIGH or
  LOW), and then write that value to pin 13. Using this you are able
  to connect multiple components through an Arduino and easily change
  the topology of the network without having to rewire everything!

  Each output is associated with a set of channels. Only one of these
  channels may be activated at any given time. When a channel is
  activated all of the inputs on that channel are logically OR'd
  together in order to produce the output. That is to say that if any
  of the inputs on that channel are HIGH the output will receive a
  value of HIGH. The output will only receive a value of LOW when none
  of the inputs on a channel are HIGH. The channels are disjoint for
  each output. If output 1 and output 2 both have a channel 7, then
  the channel 7's may have a completely separate set of inputs.

* Interface

** Structures
   Using this API you will encounter one main structure - the
   ArdPipe. It looks something like this:

   #+BEGIN_SRC c
     typedef struct ArdPipe {
         int in_pin;
         int out_pin;
         int channel;
     } ArdPipe;
   #+END_SRC

   The ArdPipe structure just represents a connection between an input
   pin, and an output pin on a given channel. These are used to
   register connections with MuxDuino, and to remove them if
   necessary.

** Registering Pipes with MuxDuino
   In order to use MuxDuino in a project we need to tell it which
   inputs map to which outputs! In order to do this we use the
   following function:

   #+BEGIN_SRC c
     int register_pipe(ArdPipe pipe);
   #+END_SRC

   Let's say that *pipe* looks something like this:

   #+BEGIN_SRC c
     ArdPipe pipe;

     pipe.in_pin = 7;
     pipe.out_pin = 9;
     pipe.channel = 0;
   #+END_SRC

   All this function call does is tell MuxDuino that we want to send
   the value we read off of pin 7 to the output pin 9 whenever the
   channel for output pin 9 is set to 0. If there are other inputs on
   channel 0 for pin 9 input 7 will be logically OR'd with the rest of
   the inputs in channel 0 to produce the output.

   The channel for the output will be set to the channel of the first
   registered pipe with that output.

   This function will return 0 on success, and 1 otherwise. The
   function will fail, and return 1, if you try to register an input
   that has already been defined as an output, an output that has
   already been defined as an input, or a pipe with identical input
   and output pins. Also note that this function may allocate some
   memory.

* TODO Stuff to add to notes.
  remove_pipe()
  set_output_channel()
  mux_update()
